{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","className","highlightWinSquares","onClick","updateStateOnClick","value","Board","React","Component","highlightSquares","i","this","winningSquares","length","indexOf","generateRow","index","max","rows","push","renderSquare","generateBoard","columns","board","key","highlight","squares","render","Game","initialize","history","Array","fill","location","col","row","active","moveNumber","xIsNext","stepNumber","toggle","state","reset","setState","jumpTo","step","forEach","item","handleClick","slice","Math","floor","calculateWinner","prevState","concat","toggleMoves","lines","result","status","win","a","b","c","player","filter","current","gameStatus","moves","map","move","desc","sort","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d02a4713.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = props => {\n  return (\n    <button\n      className={props.highlightWinSquares}\n      onClick={props.updateStateOnClick}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport \"../index.css\";\n\nclass Board extends React.Component {\n  highlightSquares = i => {\n    if (this.props.winningSquares.length > 0) {\n      if (this.props.winningSquares.indexOf(i) > -1) {\n        return \"square winningSquares\";\n      } else {\n        return \"square\";\n      }\n    } else {\n      return \"square\";\n    }\n  };\n\n  renderSquare(i) {\n    let highlight = this.highlightSquares(i);\n    return (\n      <Square\n        key={i}\n        highlightWinSquares={highlight}\n        value={this.props.squares[i]}\n        updateStateOnClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  generateRow = (index, max) => {\n    let rows = [];\n\n    for (index; index < max; index++) {\n      rows.push(this.renderSquare(index));\n    }\n    return rows;\n  };\n\n  generateBoard = (columns, rows) => {\n    let board = [];\n\n    /**\n     * Generate (col * row, here, 3 * 3 = 9) squares\n     */\n    for (let i = 0; i < columns * rows; i++) {\n      /**\n       * Generate columns.\n       *\n       * Only allow multiples of \"number of columns\".\n       * For example, if number of columns is 3, then,\n       * 3, 6, 9.\n       */\n      if (i % columns === 0) {\n        board.push(\n          <div className=\"board-row\" key={i}>\n            {this.generateRow(i, i + columns)}\n          </div>\n        );\n      }\n    }\n    return board;\n  };\n\n  render() {\n    return (\n      <div>\n        <div>{this.generateBoard(3, 3)}</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"../index.css\";\n\nclass Game extends React.Component {\n  /**\n   * Initial state of the game\n   */\n  initialize = () => {\n    return {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location: {\n            col: 0,\n            row: 0\n          },\n          active: false,\n          moveNumber: 0\n        }\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      toggle: false\n    };\n  };\n\n  state = this.initialize();\n\n  reset = () => {\n    this.setState(this.initialize());\n  };\n\n  jumpTo = step => {\n    let history = this.state.history;\n\n    history.forEach(item => {\n      item.active = false;\n    });\n\n    history[step].active = true;\n    this.setState({\n      history: history,\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  };\n\n  handleClick = i => {\n    /**\n     * If we jumped to some previous step, and then make\n     * a new move from that point, we throw away all \"future\"\n     * history that will now become irrelevant.\n     *\n     * slice(startingPoint, endPoint)\n     *\n     * startingPoint - Array index from where the \"slicing\" starts.\n     * endPoint - All array indices less than endPoint will be included in \"slicing\"\n     */\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const columns = 3;\n\n    /**\n     * Calculate location of square when clicked\n     */\n    const col = Math.floor(i % columns) + 1;\n    const row = Math.floor(i / columns) + 1;\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    /**\n     * concat() method does not mutate the Array\n     * unlike Array.push().\n     */\n    this.setState(prevState => ({\n      history: history.concat([\n        {\n          squares: squares,\n          location: {\n            col: col,\n            row: row\n          },\n          active: false,\n          moveNumber: history.length\n        }\n      ]),\n      xIsNext: !prevState.xIsNext,\n      stepNumber: history.length\n    }));\n  };\n\n  toggleMoves = () => {\n    const toggle = !this.state.toggle;\n    this.setState({\n      toggle: toggle\n    });\n  };\n\n  calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let result = {\n      status: \"\",\n      win: {}\n    };\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        result = {\n          status: \"win\",\n          win: { player: squares[a], squares: [a, b, c] }\n        };\n        return result;\n      }\n    }\n    let tempSq = squares.filter(item => item === null);\n    if (tempSq.length === 0) {\n      result = { status: \"draw\", win: {} };\n      return result;\n    }\n    return null;\n  };\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const result = this.calculateWinner(current.squares);\n    const gameStatus = result && result.status ? result.status : null;\n\n    const moves = history.map((move, index) => {\n      const desc = index ? \"Go to move #\" + index : \"Go to game start\";\n\n      let active = \"\";\n      if (move.active) {\n        active = \"active\";\n      } else {\n        active = \"normal\";\n      }\n      return (\n        <li key={index}>\n          <button\n            className={active}\n            key={`${move.location.col}_${move.location.row}`}\n            onClick={() => this.jumpTo(index)}\n          >\n            {`${desc} (${move.location.col}, ${move.location.row})`}\n          </button>\n        </li>\n      );\n    });\n\n    /**\n     * If this.state.toggle is \"true\", sort in\n     * \"decending order\" and vice versa.\n     */\n    moves.sort((a, b) => {\n      if (this.state.toggle) {\n        return b.key - a.key;\n      } else {\n        return a.key - b.key;\n      }\n    });\n\n    let status;\n\n    if (gameStatus === \"win\") {\n      status = `Winner: ${result.win.player}`;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        {/** If there is a draw, hide the game board and show \n          \"Play again\" button */\n        gameStatus === \"draw\" ? (\n          <div className=\"draw\">\n            <h2>Draw!</h2>\n            <button onClick={() => this.reset()}>Play again</button>\n          </div>\n        ) : (\n          /** Otherwise, show the game board */\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              winningSquares={gameStatus === \"win\" ? result.win.squares : []}\n              onClick={(i, col, row) => this.handleClick(i, col, row)}\n            />\n            {/** Depending upon the state of the game, either show \n              \"Play again\" button or \"Reset game\" button */\n            gameStatus === \"win\" ? (\n              <div className=\"win\">\n                <h2>{`\"${result.win.player}\" is winner!`}</h2>\n                <button onClick={() => this.reset()}>Play again</button>\n              </div>\n            ) : (\n              <div className=\"reset\">\n                <button onClick={() => this.reset()}>Reset game</button>\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {/** Show the toggle button only if there are two or more moves to sort */\n          history.length > 1 ? (\n            <button onClick={() => this.toggleMoves()}>Toggle moves</button>\n          ) : (\n            \"\"\n          )}\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./components/Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}